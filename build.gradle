plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

group 'de.gruppe2'
version '1.0-SNAPSHOT'
mainClassName = 'de.bp.pacman.Main'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'de.bp.pacman'
    mainClass = 'de.bp.pacman.Main'
}

javafx {
    version = '17.0.1'
    modules = ['javafx.controls', 'javafx.fxml','javafx.media']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.5.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.ikonli:ikonli-javafx:12.3.1')
    implementation 'org.json:json:20220924'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    implementation 'org.openjfx:javafx-media:17.0.0.1:win'
    implementation 'org.openjfx:javafx-media:17.0.0.1:linux'
    implementation 'org.openjfx:javafx-media:17.0.0.1:mac'

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:win"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:linux"
    runtimeOnly "org.openjfx:javafx-graphics:$javafx.version:mac"
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}

task distJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes 'Main-Class': 'de.bp.pacman.Main'
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
